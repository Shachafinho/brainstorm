openapi: 3.0.0
info:
  description: This is the swagger file that goes with the API server code
  version: 1.0.0
  title: Swagger REST Article


paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users.
      description: Read the list of users
      operationId: brainstorm.api.controllers.get_users
      responses:
        "200":
          description: Successful get users operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MinimalUser"

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Gets a user by ID.
      description: Read a specific user
      operationId: brainstorm.api.controllers.get_user
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: Successful get specific user operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{user_id}/snapshots:
    get:
      tags:
        - Snapshots
      summary: Gets all user's snapshots.
      description: Read the list of user's snapshots
      operationId: brainstorm.api.controllers.get_snapshots
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: Successful get user's snapshots operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MinimalSnapshot"

  /users/{user_id}/snapshots/{snapshot_timestamp}:
    get:
      tags:
        - Snapshots
      summary: Gets a user's snapshot by timestamp.
      description: Read a specific user's snapshot
      operationId: brainstorm.api.controllers.get_snapshot
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/SnapshotTimestamp"
      responses:
        "200":
          description: Successful get user's specific snapshot operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{user_id}/snapshots/{snapshot_timestamp}/{result_name}:
    get:
      tags:
        - Results
      summary: Gets a user's snapshot's result by name.
      description: Read a specific user's snapshot's result
      operationId: brainstorm.api.controllers.get_result
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/SnapshotTimestamp"
        - $ref: "#/components/parameters/ResultName"
      responses:
        "200":
          description: Successful get user's snapshot's specific result operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{user_id}/snapshots/{snapshot_timestamp}/{result_name}/data:
    get:
      tags:
        - Results
      summary: Gets the data of a user's snapshot's result.
      description: Read the data of a specific user's snapshot's result
      operationId: brainstorm.api.controllers.get_result_data
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/SnapshotTimestamp"
        - $ref: "#/components/parameters/ResultName"
      responses:
        "200":
          description: OK
          content:
            image/jpeg:
              schema:
                $ref: "#/components/schemas/ResultImageData"
          # $ref: "#/components/responses/ImageData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"


servers:
  - url: /


components:
  schemas:
    UserId:
      description: User ID
      type: integer
      format: int64
      minimum: 0

    MinimalUser:
      description: A minimal representation of a user
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        name:
          type: string
      required:
        - name

    User:
      description: A full representation of a user
      allOf:
        - $ref: "#/components/schemas/MinimalUser"
        - type: object
          properties:
            birthday:
              type: string
              format: date-time
            gender:
              type: string
          required:
            - birthday
            - gender

    SnapshotTimestamp:
      description: Snapshot timestamp (used as ID)
      type: string
      format: date-time

    MinimalSnapshot:
      description: A minimal representation of a snapshot
      type: object
      properties:
        timestamp:
          $ref: "#/components/schemas/SnapshotTimestamp"

    Snapshot:
      description: A full representation of a snapshot
      allOf:
        - $ref: "#/components/schemas/MinimalSnapshot"
        - type: object
          properties:
            results:
              type: array
              items:
                type: string

    ResultName:
      description: Result's name
      type: string

    Result:
      description: Result
      anyOf:
        - $ref: "#/components/schemas/ResultColorImage"
        - $ref: "#/components/schemas/ResultDepthImage"
        - $ref: "#/components/schemas/ResultFeelings"
        - $ref: "#/components/schemas/ResultPose"

    ResultImage:
      type: object
      properties:
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
      required:
        - width
        - height

    ResultColorImage:
      $ref: "#/components/schemas/ResultImage"

    ResultDepthImage:
      $ref: "#/components/schemas/ResultImage"

    ResultImageData:
      type: string
      format: binary

    ResultFeeling:
      description: >
        A measurement of a specific feeling, on a scale of 0 to 1.
        0 means *not at all*, while 1 means *very*.
      type: number
      format: float
      minimum: 0
      maximum: 1

    ResultFeelings:
      type: object
      properties:
        hunger:
          $ref: "#/components/schemas/ResultFeeling"
        thirst:
          $ref: "#/components/schemas/ResultFeeling"
        exhaustion:
          $ref: "#/components/schemas/ResultFeeling"
        happiness:
          $ref: "#/components/schemas/ResultFeeling"
      required:
        - hunger
        - thirst
        - exhaustion
        - happiness

    ResultDoubleNumber:
      type: number
      format: double

    ResultRotation:
      type: object
      properties:
        x:
          $ref: "#/components/schemas/ResultDoubleNumber"
        y:
          $ref: "#/components/schemas/ResultDoubleNumber"
        z:
          $ref: "#/components/schemas/ResultDoubleNumber"
        w:
          $ref: "#/components/schemas/ResultDoubleNumber"
      required:
        - x
        - y
        - z
        - w

    ResultTranslation:
      type: object
      properties:
        x:
          $ref: "#/components/schemas/ResultDoubleNumber"
        y:
          $ref: "#/components/schemas/ResultDoubleNumber"
        z:
          $ref: "#/components/schemas/ResultDoubleNumber"
      required:
        - x
        - y
        - z

    ResultPose:
      type: object
      properties:
        translation:
          $ref: "#/components/schemas/ResultTranslation"
        rotation:
          $ref: "#/components/schemas/ResultRotation"
      required:
        - translation
        - rotation

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message


  parameters:
    UserId:
      name: user_id
      in: path
      description: User ID
      required: true
      schema:
        $ref: "#/components/schemas/UserId"

    SnapshotTimestamp:
      name: snapshot_timestamp
      in: path
      description: Snapshot's timestamp (used as ID)
      required: true
      schema:
        $ref: "#/components/schemas/SnapshotTimestamp"

    ResultName:
      name: result_name
      in: path
      description: Result's name
      required: true
      schema:
        $ref: "#/components/schemas/ResultName"


  responses:
    ImageData:
      description: Image data as an image.
      content:
        image/jpeg:
          schema:
            $ref: "#/components/schemas/ResultImageData"

    BadRequest:
      description: The request was invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
